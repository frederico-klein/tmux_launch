#!/usr/bin/env python3

import argparse
import rosparam
import roslaunch
import rosmaster
import rospkg
import glob
import os
from tmux_launch.tmux_session_manager import TmuxManager as TSM

##wtf
_ID = '/roslaunch'



parser = argparse.ArgumentParser(description="My Script Description")
parser.add_argument("first_arg", help="First argument description")
parser.add_argument("second_arg", help="Second argument description")
args = parser.parse_args()


print(args.first_arg, args.second_arg)

rospack = rospkg.RosPack()
the_package = rospack.get_path(args.first_arg)

launch_file = None
for f in glob.glob(os.path.join(the_package, "**/*.launch" ), recursive=True):
    if args.second_arg in f:
        launch_file = f
        break
    #print(f)


all_nodes = {}
all_includes = []
launch_file_list = []
launch_file_list.append(launch_file)

traversed_list = []

while (len(launch_file_list)>0):

    launch_file = launch_file_list.pop(0)
    print("trying to open %s"%launch_file)
    traversed_list.append(launch_file)
    loader = roslaunch.xmlloader.XmlLoader()
    config = roslaunch.config.ROSLaunchConfig()
    loader.load(launch_file, config, verbose=False)

    all_nodes.update({launch_file:config.nodes})

    break
    for ff in config.roslaunch_files:
        print(ff)
        if not ff in traversed_list: 
            launch_file_list.append(ff)
            print(ff)
#!but_recursive!  get it ! not... it is not necessary to make it recursive. it is smart after all.

should_kill_self = False
my_master = None
try:
    rosparam.set_param_raw("is_running", True)
except:
    should_kill_self = True
    my_master = rosmaster.master.Master()
    my_master.start()
tsm = TSM()
##todo detect if there is a roscore and only open if there isnt
tsm.create_session(session_name=os.path.splitext(args.second_arg)[0])#, initial_command = "roscore")

## dumps all the parameters, hopefully in the right place
for p in config.params.values():
    print(f"<<<<param {p}>>>>>>\n")
    rosparam.set_param_raw(p.key, p.value)

##TODO: since it does the recursion already, this logic can be simplified quite a bit


for i, (lfile, nodelist) in enumerate(all_nodes.items()):
    this_window_name = os.path.splitext(os.path.basename(lfile))[0]
    tw = tsm.new_tab(window_name=this_window_name)
    if len(nodelist) <= 4:
        tsm.default_splits4(window_handle=tw)
    elif len(nodelist) <= 8:
        tsm.default_splits8(window_handle=tw)
    elif len(nodelist) > 8:
        raise("Not implemented")

    for j, node in enumerate(nodelist):
        node_xml = node.to_xml()
        my_node_temp_launch_file = f"/tmp/w{i:02}n{j:02}.launch" 

        create_command = f"<launch>{node_xml}</launch>"
        with open(my_node_temp_launch_file,"w") as afile:
            afile.write(create_command)
        tw.panes[j].send_keys(f"roslaunch {my_node_temp_launch_file}",enter =True)   

print(launch_file)

print(all_nodes)

tsm.attach()

if should_kill_self:
    my_master.stop()
